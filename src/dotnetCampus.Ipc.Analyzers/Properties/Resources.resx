<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DIPC001" xml:space="preserve">
    <value>IPC unknown error</value>
  </data>
  <data name="DIPC001_Message" xml:space="preserve">
    <value>An unknown error occured when generating IPC types. The error is: {0}</value>
  </data>
  <data name="DIPC002" xml:space="preserve">
    <value>Contract type not specified</value>
  </data>
  <data name="DIPC002_Message" xml:space="preserve">
    <value>IpcPublic attribute must have a contract type as its first argument.</value>
  </data>
  <data name="DIPC003" xml:space="preserve">
    <value>IPC contract type must be an interface</value>
  </data>
  <data name="DIPC003_Message" xml:space="preserve">
    <value>IPC contract type must be an interface but {0} is not.</value>
  </data>
  <data name="DIPC004" xml:space="preserve">
    <value>IPC contract type dismatches with interface</value>
  </data>
  <data name="DIPC004_Message" xml:space="preserve">
    <value>{0} does not implement the contract type {1} that the IpcPublic marked.</value>
  </data>
  <data name="DIPC010" xml:space="preserve">
    <value>IPC Proxy cannot be generated</value>
  </data>
  <data name="DIPC010_Message" xml:space="preserve">
    <value>There is no type in this assembly implements the IPC contract interface {0}, so you need to set one explicitly as the second type argument.</value>
  </data>
  <data name="DIPC011" xml:space="preserve">
    <value>The IPC proxy type does not match the IPC contract type</value>
  </data>
  <data name="DIPC011_Message" xml:space="preserve">
    <value>The IPC proxy type {0} does not match the IPC contract type {1}.</value>
  </data>
  <data name="DIPC012" xml:space="preserve">
    <value>The IPC joint type does not match the IPC contract type</value>
  </data>
  <data name="DIPC012_Message" xml:space="preserve">
    <value>The IPC joint type {0} does not match the IPC contract type {1}.</value>
  </data>
  <data name="DIPC020" xml:space="preserve">
    <value>Only method or property is supported</value>
  </data>
  <data name="DIPC020_Message" xml:space="preserve">
    <value>Unknown IPC member {0}. IPC object only supports methods and properties.</value>
  </data>
  <data name="DIPC021" xml:space="preserve">
    <value>Event is not supported for an IPC object</value>
  </data>
  <data name="DIPC021_Message" xml:space="preserve">
    <value>Event {0} is not supported for an IPC object.</value>
  </data>
  <data name="DIPC022" xml:space="preserve">
    <value>Set-only property is not supported</value>
  </data>
  <data name="DIPC022_Message" xml:space="preserve">
    <value>Unknown IPC property {0}. Only get or get-set property is supported.</value>
  </data>
  <data name="DIPC101" xml:space="preserve">
    <value>IgnoresIpcException is recommended</value>
  </data>
  <data name="DIPC101_Fix1" xml:space="preserve">
    <value>Set IgnoresIpcException to true</value>
  </data>
  <data name="DIPC101_Fix2" xml:space="preserve">
    <value>Set IgnoresIpcException to false</value>
  </data>
  <data name="DIPC101_Message" xml:space="preserve">
    <value>For better readability, IgnoresIpcException is recommended to set so that the developers know that there may have been some IPC exceptions here.</value>
  </data>
  <data name="DIPC102" xml:space="preserve">
    <value>IPC timeout can't be negative</value>
  </data>
  <data name="DIPC102_Message" xml:space="preserve">
    <value>IPC timeout can't be negative, but it is set to {0}ms.</value>
  </data>
  <data name="DIPC103" xml:space="preserve">
    <value>The timeout is zero</value>
  </data>
  <data name="DIPC103_Message" xml:space="preserve">
    <value>A timeout with zero milliseconds does nothing so there is no need to assign this property.</value>
  </data>
  <data name="DIPC120" xml:space="preserve">
    <value>The DefaultReturn is useless</value>
  </data>
  <data name="DIPC120_Fix1" xml:space="preserve">
    <value>Remove the DefaultReturn</value>
  </data>
  <data name="DIPC120_Fix2" xml:space="preserve">
    <value>Set IgnoresIpcException to true</value>
  </data>
  <data name="DIPC120_Message" xml:space="preserve">
    <value>The DefaultReturn only works with the situation in which IgnoresIpcException is set to true.</value>
  </data>
  <data name="DIPC121" xml:space="preserve">
    <value>Empty {0} is not needed</value>
  </data>
  <data name="DIPC121_Fix" xml:space="preserve">
    <value>Remove the {0}</value>
  </data>
  <data name="DIPC121_Message" xml:space="preserve">
    <value>Empty {0} does nothing, so there is no need to add it.</value>
  </data>
  <data name="DIPC122" xml:space="preserve">
    <value>WaitsVoid is recommended</value>
  </data>
  <data name="DIPC122_Message" xml:space="preserve">
    <value>Commonly, developers can hardly determin whether a waiting is happened during an IPC call if a method returns void. So it's recommended to assign WaitsVoid to the value you want instead of keeping it as false by default.</value>
  </data>
  <data name="DIPC123" xml:space="preserve">
    <value>IsReadonly is unnecessary</value>
  </data>
  <data name="DIPC123_Message" xml:space="preserve">
    <value>IsReadonly is set to false by default, so there is no need to assign it to false manully.</value>
  </data>
  <data name="DIPC124" xml:space="preserve">
    <value>The DefaultReturn type does not match the property type</value>
  </data>
  <data name="DIPC124_Message" xml:space="preserve">
    <value>The IPC DefaultReturn type {0} does not match the property type {1}.</value>
  </data>
  <data name="DIPC125" xml:space="preserve">
    <value>The DefaultReturn type does not match the method return type</value>
  </data>
  <data name="DIPC125_Message" xml:space="preserve">
    <value>The IPC DefaultReturn type {0} does not match the method return type {1}.</value>
  </data>
  <data name="DIPC126" xml:space="preserve">
    <value>The DefaultReturn value for a void method is useless</value>
  </data>
  <data name="DIPC126_Message" xml:space="preserve">
    <value>The DefaultReturn value for a void method {0} is useless.</value>
  </data>
  <data name="DIPC127" xml:space="preserve">
    <value>The string is treated as a code snippet</value>
  </data>
  <data name="DIPC127_Message" xml:space="preserve">
    <value>The string {0} is treated as a code snippet and will be set to an object type. If you want to set the original string to it, use @"""{0}""" instead.</value>
  </data>
  <data name="DIPC128" xml:space="preserve">
    <value>The string is treated as a code snippet</value>
  </data>
  <data name="DIPC128_Message" xml:space="preserve">
    <value>The string {0} is treated as a code snippet and will be set to a {1} type.</value>
  </data>
  <data name="DIPC129" xml:space="preserve">
    <value>The string is treated as a code snippet but cannot be compiled</value>
  </data>
  <data name="DIPC129_Message" xml:space="preserve">
    <value>The string {0} is treated as a code snippet but cannot be compiled.</value>
  </data>
</root>